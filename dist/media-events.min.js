/**
 * angular-media-events - angular directives for media events
 * @author Alex Vernacchia <alvernacchia@gmail.com>
 * @version 0.3.0
 * @repo https://github.com/vernak2539/angular-media-events
 * @license MIT
 * Created: Wed May 11 2016 13:12:01 GMT+0100 (GMT Summer Time)
 */
!function(){"use strict";angular.module("media-events",[]).service("eval-service",[function(){this.scopeEval=function(e){var t;e=e||{},t=e.scope;var n={$event:e.$event};e.attrs&&(n.attrs=e.attrs),t.$eval(e.fn,n)}}])}(),function(){"use strict";angular.module("media-events").directive("loadedMetadata",["eval-service",function(e){return{restrict:"A",scope:!0,link:function(t,n,i){n.on("loadedmetadata",function(n){var s={width:this.videoWidth,height:this.videoHeight};e.scopeEval({scope:t,fn:i.loadedMetadata,$event:n,attrs:s})})}}}])}(),function(){"use strict";angular.module("media-events").directive("onPause",["eval-service",function(e){return{restrict:"A",scope:!0,link:function(t,n,i){n.on("pause",function(n){e.scopeEval({scope:t,fn:i.onPause,$event:n})})}}}])}(),function(){"use strict";angular.module("media-events").directive("progress",["eval-service",function(e){return{restrict:"A",scope:!0,link:function(t,n,i){n.on("progress",function(n){var s={buffered:this.buffered};e.scopeEval({scope:t,fn:i.progress,$event:n,attrs:s})})}}}])}();
//# sourceMappingURL=data:application/json;base64,
